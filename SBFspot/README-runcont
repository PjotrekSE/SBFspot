Readme file for run continuously and alternate config features
==============================================================

Four new parameters were added to the config file:

# RunInterval
# Run interval in minutes, must be >= 0, 0 means run once
RunInterval=5

# Alternate config for SIGHUP
AltConfig=/tmp/SBFspot.cfg

# Run interval for SIGUSR1
RunInterval1=0

# Run interval for SIGUSR2
RunInterval2=0


Using the parameter RunInterval, it is possible to run SBFspot at 
regular intervals from 1 to 300 minutes. A RunInterval of 0 means a
one-shot operation, that is, just as before.

It is possible to set two alternate intervals with RunInterval1 and
RunInterval2. These intervals can then be activated by sending
SIGUSR1 and SIGUSR2 to the SBFspot process, respectively. This can be
achieved by the Linux command: 'pkill -USR1 SBFspot'. Exchange USR2 for
USR1 as desired.
SBFspot will then update the interval time, and immediately reset the
loop timing to the new value. If the new loop value is < 0, a processing
loop will be started immediately.
SBFspot will show no drift in execution times over longer time, as it
will always start on the same nanosecond, except for the case where loop
time was negative as a consequence of a change. On the next lapse, however,
it  will continue starting on the same nanosecond as before.
A slight variation will occur, due to influence by other tasks. However,
the long time stability will remain the same.

It is also possible to make SBFspot reread the entire config file from
an alternate location, specified by the AltConfig parameter. To activate
this, run Linux command: 'pkill -HUP SBFspot'.

To end the continuously running SBFspot, run Linux command: 
 'pkill -TERM SBFspot', or just pressing Ctrl-C. SBFspot will then finish
immediately if it was in a waiting state, otherwise as soon as current
processing loop is finished.

All these signals may of course also be sent from programs. Check the
documentation for 'signal' for your favourite languages. 
Node Red also has a node that can be used for this purpose.

There are many uses for features like this. In my setting, SBFspot
normally runs every 5 minutes. But when I switch on the charger for my
hybrid car in the 'MQTT Dash' app, a Node Red flow sends a USR1 signal
to run SBFspot every minute, to use as much sun energy as possible,
and as little as possible from the grid, and a USR2 signal to revert
running every 5 minutes when the car is fully charged.

It appears that at least my inverter honors at a maximum 60 queries per
hour; trying more than that results in 'Connection denied'.
Thus, it makes no sense in having an interval smaller than a minute.

A .service file is provided for running SBFspot as a service under Linux.
See text inside service file for how to use it, and study man page 
for 'systemctl'. If you want to get some output from the service, you
may want to redirect output to a logfile. A good description of how to
achieve this may be found at:
https://stackoverflow.com/questions/37585758/how-to-redirect-output-of-systemd-service-to-a-file
 
The advantage of running SBFspot continuously/periodically is eliminating
the overhead of reconnecting and disconnecting from inverter and databases,
if databases are used. Even greater advantages when using MQTT would be won
if MQTT was integrated using available C/C++ MQTT libraries. Then lapse
time could be significantly reduced, lowering CPU load, which might be
important in low-end Raspberry Pi's or similar.

A lapse timing will be shown with verbose >= 2.
